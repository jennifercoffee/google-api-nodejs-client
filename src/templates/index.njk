// Copyright 2012-2016, Google, Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! THIS FILE IS AUTO-GENERATED */

import * as path from 'path';
import * as util from 'util';
import { APIList, ServiceOptions } from '../lib/api';
{% for apiName, api in apis %}
{% for versionName, version in api %}import * as {{ apiName }}_{{ version|dotToUnderscore }} from './{{ apiName }}/{{ version }}';
{% endfor %}
{% endfor %}

export interface APIList {
  // tslint:disable-next-line: no-any
  [index: string]: { [index: string]: any };
}

const APIS: APIList = {
  {% for apiName, api in apis %}{{ apiName }}: {
    {% for versionName, version in api %}'{{ version }}': {{ apiName }}_{{ version|dotToUnderscore }}.{{apiName|capitalize}},
    {% endfor %}
  },
  {% endfor %}
};

export class GeneratedAPIs {
  private getAPI(api: string, options: ServiceOptions|string) {
    let version: string;
    if (typeof options === 'string') {
      version = options;
      options = {};
    } else if (typeof options === 'object') {
      version = options.version!;
      delete options.version;
    } else {
      throw new Error('Argument error: Accepts only string or object');
    }
    try {
      const endpoint = APIS[api][path.basename(version)];
      const ep = new endpoint(options);
      ep.google = this;          // for drive.google.transporter
      return Object.freeze(ep);  // create new & freeze
    } catch (e) {
      throw new Error(
          `Unable to load endpoint ${api}("${version}"): ${e.message}`);
    }
  }

{% for apiName, api in apis %}
{{ apiName }}(options: ServiceOptions|string) {
  return this.getAPI('{{ apiName }}', options);
}
{% endfor %}
}